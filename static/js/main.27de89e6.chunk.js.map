{"version":3,"sources":["Login.js","Register.js","Article.js","Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","Email","Password","bind","login","event","this","setState","target","value","fetch","method","headers","body","JSON","stringify","then","Response","json","result","console","log","Status","alert","props","history","push","catch","error","className","Form","Input","type","onChange","placeholder","Button","onClick","color","block","Component","Register","lastName","firstName","jobRole","email","password","gender","department","register","Result","Article","Title","create","title","article","cols","rows","Dashboard","App","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","name","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27de89e6.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button, Form, Input,} from 'reactstrap';\r\nclass Login extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            Email: '',\r\n            Password: ''\r\n        }\r\n        this.Password = this.Password.bind(this);\r\n        this.Email = this.Email.bind(this);\r\n        this.login = this.login.bind(this);\r\n    }\r\n    Email(event) {\r\n        this.setState({ Email: event.target.value })\r\n    }\r\n    Password(event) {\r\n        this.setState({ Password: event.target.value })\r\n    }\r\n    login(event) {\r\n        debugger;\r\n        fetch('https://capstone-teamwork-api.herokuapp.com/api/v1/auth/signin', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                Email: this.state.Email,\r\n                Password: this.state.Password\r\n            })\r\n        }).then((Response) => Response.json())\r\n            .then((result) => {\r\n                console.log(result);\r\n                if (result.Status === 'Invalid')\r\n                    alert('Invalid User');\r\n                else\r\n                    this.props.history.push(\"/Dashboard\");\r\n            }).catch( (error) => {console.log(error)})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Form-content\">\r\n\t\t\t<h1>User Login</h1>\r\n\t\t\t\t<Form>\r\n                    <Input type=\"text\" onChange={this.Email} placeholder=\"Enter Email\" />\r\n                    <Input type=\"password\" onChange={this.Password} placeholder=\"Enter Password\" />\r\n                    <Button onClick={this.login} color=\"success\" block>Login</Button>\r\n                </Form>                   \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Login;","import React, { Component } from 'react';\r\nimport { Button, Form, Input } from 'reactstrap';\r\nimport { select } from 'react-select';\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      lastName: '',\r\n\t  firstName: '',\r\n      jobRole: '',\r\n      email: '',\r\n      password: '',\r\n\t  gender: '',\r\n      department: ''\r\n    }\r\n    this.email = this.email.bind(this);\r\n    this.password = this.password.bind(this);\r\n    this.firstName = this.firstName.bind(this);\r\n    this.lastName = this.lastName.bind(this);\r\n    this.department = this.department.bind(this);\r\n\tthis.jobRole = this.jobRole.bind(this);\r\n\tthis.gender = this.gender.bind(this);\r\n    this.register = this.register.bind(this);\r\n  }\r\n  email(event) {\r\n    this.setState({ email: event.target.value })\r\n  }\r\n  department(event) {\r\n    this.setState({ department: event.target.value })\r\n  }\r\n  password(event) {\r\n    this.setState({ password: event.target.value })\r\n  }\r\n  jobRole(event) {\r\n    this.setState({ jobRole: event.target.value })\r\n  }\r\n  firstName(event) {\r\n    this.setState({ firstName: event.target.value })\r\n  }\r\n  lastName(event) {\r\n    this.setState({ lastName: event.target.value })\r\n  }\r\n  gender(event) {\r\n    this.setState({ gender: event.target.value })\r\n\tconsole.log(event.target.value);\r\n  }\r\n  register(event) {\r\n    fetch('https://capstone-teamwork-api.herokuapp.com/api/v1/auth/create-user', {\r\n      method: 'post',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        firstName: this.state.firstName,\r\n\t\tlastName: this.state.lastName,\r\n        password: this.state.password,\r\n        email: this.state.email,\r\n\t\tgender: this.state.gender,\r\n        jobRole: this.state.jobRole,\r\n        department: this.state.department\r\n      })\r\n    }).then((Response) => Response.json())\r\n      .then((Result) => { \r\n          alert('User registered successfully')\r\n      })\r\n\t  .catch((error) => { console.log(error)});\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Form-content\">\r\n        <Form>\r\n\t\t\t<h1>Register User</h1>\r\n            <Input type=\"text\"  onChange={this.firstName} placeholder=\"FirstName\" />\r\n\t\t\t<Input type=\"text\"  onChange={this.lastName} placeholder=\"LastName\" />\r\n            <Input type=\"text\"  onChange={this.email} placeholder=\"Email\" />\r\n            <Input type=\"password\"  onChange={this.password} placeholder=\"Password\" />\r\n            <Input type=\"text\"  onChange={this.jobRole} placeholder=\"JobRole\" />\r\n            <Input type=\"text\"  onChange={this.department} placeholder=\"Department\" />\r\n\t\t\t<select onChange={this.gender} >\r\n\t\t\t\t<option >Select Gender</option>\r\n\t\t\t\t<option value=\"Male\">Male</option>\r\n\t\t\t\t<option value=\"Female\">Female</option>\r\n\t\t\t</select>\r\n            <Button  onClick={this.register}  color=\"success\" block>Create Account</Button>\r\n        </Form>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Register;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport { Button, Form, Input,} from 'reactstrap';\r\nclass Article extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            Title: '',\r\n            Article: ''\r\n        }\r\n        this.Title = this.Title.bind(this);\r\n        this.Article = this.Article.bind(this);\r\n        this.create = this.create.bind(this);\r\n    }\r\n    Title(event) {\r\n        this.setState({ Title: event.target.value })\r\n    }\r\n    Article(event) {\r\n        this.setState({ Article: event.target.value })\r\n    }\r\n    create(event) {\r\n        debugger;\r\n        fetch('https://capstone-teamwork-api.herokuapp.com/api/v1/articles', {\r\n            method: 'post',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                title: this.state.Title,\r\n                article: this.state.Article\r\n            })\r\n        }).then((Response) => Response.json())\r\n            .then((result) => {\r\n                console.log(result);\r\n                if (result.Status === 'Invalid')\r\n                    alert('Invalid User');\r\n                else\r\n                    this.props.history.push(\"/Dashboard\");\r\n            }).catch( (error) => {console.log(error)})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"Form-content\">\r\n\t\t\t<h1>Post Article</h1>\r\n\t\t\t\t<Form>\r\n                    <Input type=\"text\" onChange={this.Title} placeholder=\"Enter Title\" />\r\n                    <textarea type=\"text\"  cols=\"30\" rows=\"7\" onChange={this.Article} placeholder=\"Write Article \" />\r\n                    <Button onClick={this.create} color=\"success\" block>Post Article</Button>\r\n                </Form>                   \r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Article;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Article from './Article';\r\n  class Dashboard extends Component {\r\n    render() {\r\n        return (\r\n            <Article></Article>\r\n        );\r\n    }\r\n}\r\nexport default Dashboard;","import React from 'react';   \nimport './App.css';  \nimport Login from './Login';  \nimport Register from './Register';  \nimport Dashboard from './Dashboard';  \nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';   \nfunction App() {  \n  return (  \n    <Router>    \n      <div className=\"container\">       \n          <div className=\"navbar\" > \n\t\t\t<h2>Capstone Teamwork</h2>\t\t  \n            <ul>  \n              <li>    \n                <Link to={'/Login'} className=\"nav-link\">Login</Link>    \n              </li>    \n              <li>    \n                <Link to={'/Register'} className=\"nav-link\">Register</Link>    \n              </li>    \n            </ul>    \n          </div>    \n\t\t\t<br />    \n        <Switch>    \n          <Route exact path='/Login' component={Login} />    \n          <Route path='/Register' component={Register} />    \n        </Switch>    \n        <Switch>  \n        <Route path='/Dashboard' component={Dashboard} />    \n        </Switch>  \n      </div>    \n    </Router>   \n  );  \n}  \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nlet myname = \"Hammed\";\n\nReactDOM.render(<App name={myname} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}