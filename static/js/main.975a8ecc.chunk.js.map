{"version":3,"sources":["logo.svg","ChangeColorButton.js","ColorBlock.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChangeColorButton","props","handleClick","bind","this","clickHandler","console","log","onClick","currentColor","React","Component","ColoredBlock","state","color","changeColor","setState","prevState","className","style","height","width","backgroundColor","App","ColorBlock","Boolean","window","location","hostname","match","ReactDOM","render","name","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6KAAAA,EAAOC,QAAU,IAA0B,kC,0JCmB5BC,E,YAhBd,WAAYC,GAAO,IAAD,8BACjB,4CAAMA,KACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,2EAKjBC,KAAKH,MAAMI,eACRC,QAAQC,IAAI,a,+BAIb,OACE,4BAAQC,QAAWJ,KAAKF,aAAxB,eAAmDE,KAAKH,MAAMQ,kB,GAZpCC,IAAMC,WC8BvBC,E,YA5Bd,WAAYX,GAAO,IAAD,8BACjB,4CAAMA,KACDY,MAAQ,CACZC,MAAO,OAER,EAAKC,YAAc,EAAKA,YAAYZ,KAAjB,gBALF,E,2EAefC,KAAKY,SAAS,SAACC,EAAWhB,GAAZ,MAAuB,CACnCa,MAA2B,QAApBG,EAAUH,MAAkB,OAAS,W,+BAI9C,OACE,yBAAKI,UAAU,gBAAgBC,MAAO,CAACC,OAAQ,QAASC,MAAO,QAASC,gBAAiBlB,KAAKS,MAAMC,QAClG,kBAAC,EAAD,CAAmBT,aAAgBD,KAAKW,YAAaN,aAAcL,KAAKS,MAAMC,a,GAvB3DJ,IAAMC,WCgBlBY,E,iLAZX,OACE,yBAAKL,UAAU,OACb,gCAAQ,6CACR,yBAAKA,UAAU,gBACb,kBAACM,EAAD,CAAYN,UAAU,mBAExB,4C,GARUP,aCOEc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,CAAKC,KAFR,WAE0BC,SAASC,eAAe,SD0HzD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.975a8ecc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\n\r\nclass ChangeColorButton extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.handleClick = this.handleClick.bind(this);\r\n\t}\r\n\thandleClick() {\r\n\t this.props.clickHandler();\r\n     console.log('clicked');\r\n  }\r\n  // if you dont want to use handle click function, you ca pass this.props.handleClick to the onClick attribute of the button\r\n  render() {\r\n    return (\r\n      <button onClick = {this.handleClick} >I dont like {this.props.currentColor}</button>\r\n    );\r\n  }\r\n} \r\n\r\nexport default ChangeColorButton;","import React from 'react';\r\nimport ChangeColorButton from './ChangeColorButton.js';\r\n\r\nclass ColoredBlock extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tcolor: 'red'\r\n\t\t};\r\n\t\tthis.changeColor = this.changeColor.bind(this);\r\n\t}\r\n\t/*changeColor() {\r\n\t\tlet newColor = this.state.color === 'red' ? 'blue' : 'red';\r\n\t\t this.setState({\r\n\t\t color: newColor\r\n    });\r\n  }*/\r\n  // Refactoe change Color\r\n    changeColor() {\r\n    this.setState((prevState, props) => ({\r\n      color: prevState.color === 'red' ? 'blue' : 'red'\r\n    }));\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"Inner-content\" style={{height: '200px', width: '200px', backgroundColor: this.state.color }}>\r\n        <ChangeColorButton clickHandler = {this.changeColor} currentColor={this.state.color} ></ChangeColorButton>\r\n      </div>\r\n    )\r\n  }\r\n} \r\n\r\nexport default ColoredBlock;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ColorBlock from './ColorBlock.js';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header><h1>My React App</h1></header>\n        <div className=\"Main-content\">\n          <ColorBlock className=\"Inner-content\" />\n        </div>\n        <footer>...</footer>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nlet myname = \"Hammed\";\n\nReactDOM.render(<App name={myname} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}